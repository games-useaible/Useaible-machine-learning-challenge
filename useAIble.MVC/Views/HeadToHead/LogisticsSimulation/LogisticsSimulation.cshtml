@{
    ViewBag.Title = "BeerDistribution";
    Layout = "~/Views/Shared/_AiProjects.cshtml";
}
<style>
    #tensorflow {
        border: solid 1px #000;
        display: block;
        padding: 0;
        margin: 0 auto;
        /*background: green;*/
        width: 100%;
    }

    #encog {
        border: solid 1px #000;
        display: block;
        padding: 0;
        margin: 0 auto;
        /*background: green;*/
        width: 100%;
    }

    #useAIble {
        border: solid 1px #000;
        display: block;
        padding: 0;
        margin: 0 auto;
        /*background: green;*/
        width: 100%;
    }


    #tensorflow {
        border: solid 1px #000;
        display: block;
        padding: 0;
        margin: 0 auto;
        /*background: green;*/
        width: 100%;
    }

    #encog {
        border: solid 1px #000;
        display: block;
        padding: 0;
        margin: 0 auto;
        /*background: green;*/
        width: 100%;
    }

    #useAIble {
        border: solid 1px #000;
        display: block;
        padding: 0;
        margin: 0 auto;
        /*background: green;*/
        width: 100%;
    }

</style>
<link href="https://fonts.googleapis.com/css?family=Shadows+Into+Light" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Handlee|Shadows+Into+Light" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Handlee|Oswald|Shadows+Into+Light" rel="stylesheet">
@*<h2>BeerDistribution</h2>*@

<input id="selected-player-hidden-input" type="hidden" data-bind="value: useAIbleSimulator().SelectedPlayerOption().Name" />
<input id="selected-head2head-options-hidden-input" type="hidden" data-bind="value: SelectedHeadToHeadOption()? SelectedHeadToHeadOption().Id : ''" />

<div class="row game-container">
    @Html.Partial("PartialViews/_ViewCharts")
    <div class="game-container" data-bind="attr: {class: gameContainer}">
        <div class="col-md-3 sidebarPanel">
            <div class="sidebarePanel panel panel-primary k-content">
                @Html.Partial("PartialViews/LogisticsSimulation/_SettingsTab")
            </div>
        </div>
        <div class="col-md-6 canvasContainer">
            <div class="simulator-container" style="">
                <div class="beer-distribution-container mainCanvas">
                    @*<!--useAIble canvas-->
                    <canvas id="ctxBeer" class="beer-distribution-container" data-bind="style:{ display: useAIbleSelected()? 'block' : 'none'  }">
                        canvas here
                    </canvas>
                    <!--Tensorflow Canvas-->
                    <div id="canvas2">
                        <canvas id="tensorflow-canvas" class="beer-distribution-container" data-bind="style:{ display: TensorflowSelected()? 'block' : 'none' }">
                            canvas here
                        </canvas>
                    </div>*@
                </div>
                <div style="bottom: 0; right: 0;">
                    <!--
                                        <button class="k-button game-history">History Information</button>
                                        <p  class="pull-right" data-toggle="modal" data-target="#myModal">
                                            <a style="cursor: pointer"> History Information</a>
                                        </p>
                    -->
                    <div>

                        <p style="font-size: 11px; font-family: lato;">This Logistics Simulation game is based on the classic Beer Distribution Game created by professors at the MIT Sloan School of Management. The purpose of the game was to highlight the complexities of multi-echelon supply chain management. If you'd like to learn more, <a href="https://en.wikipedia.org/wiki/Beer_distribution_game" target="_blank">click here. </a></p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 sessionContainer">
            <div class="panel panel-primary k-content">
                <!--useAIble Simulation Results-->
                
                    <div class="panel-heading">Simulation Results</div>
                    <div class="panel-body">
                        <button class="btn btn-info full-width view-chart margin-bottom" data-bind="visible: ShowChartBtn" style="margin-top: 20px;">View Chart</button>
                        <div id="useAIble-scores-panel" class="tab-content">
                            <div role="tabpanel" class="tab-pane active" id="secondTab1">
                                <div id="useAIble-table-container" data-bind="visible: useAIbleSelected" style="height:700px;overflow:auto;">
                                    <table class="table table-responsive" id="useAIble-table">
                                        @*<caption>useAIble</caption>*@
                                        <thead>
                                            <tr>
                                                <th>Session</th>
                                                <th>Total Cost</th>
                                            </tr>
                                        </thead>
                                        <tbody data-bind="foreach: useAIbleSimulator().SessionScores">
                                            <tr>
                                                <td data-bind="text: Session"></td>
                                                <td data-bind="text: Score"></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                                <div id="tensorflow-table-container" data-bind="visible: TensorflowSelected" style="height:700px;overflow:auto;">
                                    <table class="table table-responsive" id="tensorflow-table">
                                        @*<caption>Tensor Flow</caption>*@
                                        <thead>
                                            <tr>
                                                <th>Session</th>
                                                <th>Total Cost</th>
                                            </tr>
                                        </thead>
                                        <tbody data-bind="foreach: TensorFlowSimulator().SessionScores">
                                            <tr>
                                                <td data-bind="text: Session"></td>
                                                <td data-bind="text: Score"></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                                <div id="encog-table-container" data-bind="visible: EncogSelected" style="height:700px;overflow:auto;">
                                    <table class="table table-responsive" id="encog-table">
                                        @*<caption>Encog</caption>*@
                                        <thead>
                                            <tr>
                                                <th>Session</th>
                                                <th>Total Cost</th>
                                            </tr>
                                        </thead>
                                        <tbody data-bind="foreach: EncogSimulator().SessionScores">
                                            <tr>
                                                <td data-bind="text: Session"></td>
                                                <td data-bind="text: Score"></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                            <div role="tabpanel" class="tab-pane sessionTab2 sidebarHeight" id="secondTab2"></div>
                        </div>
                    </div>
            </div>
        </div>
        <!--Tally Sheet and Historical information sheet-->
        <!-- Modal -->
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">Advance Information Sheet</h4>
                    </div>
                    <div class="modal-body">
                        <div>
                            <h2>History</h2>
                            <p>This Logistics Simulation game is based on the classic Beer Distribution Game created by professors at the MIT Sloan School of Management. The purpose of the game was to highlight the complexities of multi-echelon supply chain management. If you'd like to learn more, <a href="https://en.wikipedia.org/wiki/Beer_distribution_game" target="_blank">click here. </a></p>
                        </div>
                    </div>
                    <div class="modal-footer">

                        @*<button type="button" class="btn btn-primary">Save changes</button>*@
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div data-bind="visible: HeadToHeadSelected, attr: {class: gameContainer}">
        <div class="col-md-3 newSideBar ">

            <div class="panel panel-primary  k-content">
                <div class="panel-heading" data-bind="text: SelectedHeadToHeadOption()? SelectedHeadToHeadOption().Id == 'useAIble-tensorflow'? 'Tensor Flow' : 'Encog' : ''"></div>
                <div class="panel-body">
                    <ul class="nav nav-tabs" role="tablist">
                        <li role="presentation" class="active"><a href="#secondTab11" aria-controls="secondTab1" role="tab" data-toggle="tab">Settings</a></li>
                        <li role="presentation"><a href="#secondTab21" aria-controls="secondTab2" role="tab" data-toggle="tab">Session Data</a></li>
                    </ul>

                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane active settingTab2" id="secondTab11">

                            @*<button class="btn btn-primary full-width" data-bind="click: ReplayGame.bind($root, 'tensorFlow'), visible: true"><span data-toggle="tooltip" data-placement="top" title="Replay"><i class="fa fa-repeat" aria-hidden="true"></i></span></button>*@
                        </div>
                        <div role="tabpanel" class="tab-pane sessionTab2 sidebarHeight" id="secondTab21">

                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-6 newCavas canvasContainer">

        </div>
        <div class="col-md-3 newSessionData">

        </div>
    </div>


</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>
<script src="~/Scripts/Game/LunarLander/Models/RNNCoreSettings.js"></script>
<script src="~/Scripts/Game/LogisticSimulation/Models/LogisticSettingsVM.js"></script>
<script src="~/Scripts/Game/Utils/canvasChart.js"></script>
<script src="~/Scripts/Game/Utils/jquery.canvasjs.min.js"></script>
<script src="~/Scripts/Repositories/DRNNRepository.js"></script>
<script src="~/Scripts/Game/LogisticSimulation/Models/PlayerVM.js"></script>
<script src="~/Scripts/Game/LogisticSimulation/useAIble-simulator.js"></script>
<script src="~/Scripts/Game/LogisticSimulation/tensorflow-simulator.js"></script>
<script src="~/Scripts/Game/LogisticSimulation/Models/HiddenLayerNeuronVM.js"></script>
<script src="~/Scripts/Game/LogisticSimulation/encog-simulator.js"></script>
@*<script src="~/Scripts/Game/LunarLander/lunarLander.js"></script>*@
<script src="~/Scripts/Game/ViewCharts.js"></script>
<script src="~/Scripts/Game/LogisticSimulation/main.js"></script>

<script>

    var USEAIBLE_USER_TOKEN;
    var TF_USER_TOKEN;
    var LOGISTIC_USER_TOKEN;

    var ctx;
    var tensorflowCtx;
    var encogCtx;

    var LogisticsSimulation = "";
    var USER_TOKEN;

    //Canvas Images
    var bg = new Image();
    bg.src = "/Content/img/AiProjects/LogisticsSimulations/background.svg";

    var mainVM;
    var imagesLoaded = false;

    var aiPlayers = ['useAIble', 'tensorflow', 'encog'];
    var canvasContext = [];

    $(function () {

        $(".view-chart").on('click', function () {

            mainVM.ShowComparisonChart(mainVM.SessionData());

        });

        var syncH2H = function () {

            if (mainVM.HeadToHeadSelected()) {

                var useAIble = mainVM.useAIbleSimulator();
                var tensorflow = mainVM.TensorFlowSimulator();
                var encog = mainVM.EncogSimulator();

                var h2h = mainVM.SelectedHeadToHeadOption();

                if (h2h) {
                    var h2hOption = h2h.Id;

                    if (h2hOption == 'useAIble-tensorflow') {

                        var useAIbleLogistics = mainVM.useAIbleSimulator().Logistics();
                        var tfLogistics = mainVM.TensorFlowSimulator().Logistics();

                        var useAIbleLogisticsPlayer = useAIbleLogistics[mainVM.SessionToPlay()];
                        var tfLogisticPlayer = tfLogistics[mainVM.SessionToPlay()];

                        var hasPlayer = useAIbleLogisticsPlayer && tfLogisticPlayer;

                        if (hasPlayer) {
                            if (mainVM.useAIbleCurrentGameDonePlaying() && mainVM.TensorFlowCurrentGameDonePlaying()) {

                                mainVM.useAIbleSimulator().StartSync(useAIbleLogisticsPlayer);
                                mainVM.TensorFlowSimulator().StartSync(tfLogisticPlayer);

                                mainVM.SessionToPlay(mainVM.SessionToPlay() + 1);
                            }
                        }
                    } else if (h2hOption == 'useAIble-encog') {

                        var useAIbleLogistics = mainVM.useAIbleSimulator().Logistics();
                        var encogLogistics = mainVM.EncogSimulator().Logistics();

                        var useAIbleLogisticsPlayer = useAIbleLogistics[mainVM.SessionToPlay()];
                        var encogLogisticPlayer = encogLogistics[mainVM.SessionToPlay()];

                        var hasPlayer = (useAIbleLogisticsPlayer || mainVM.useAIbleDonePlaying()) && (encogLogisticPlayer || mainVM.EncogDonePlaying());

                        if (hasPlayer) {
                            if ((mainVM.useAIbleCurrentGameDonePlaying()) && (mainVM.EncogCurrentGameDonePlaying())) {

                                if (!mainVM.useAIbleDonePlaying()) {
                                    mainVM.useAIbleSimulator().StartSync(useAIbleLogisticsPlayer);
                                }

                                if (!mainVM.EncogDonePlaying()) {
                                    mainVM.EncogSimulator().StartSync(encogLogisticPlayer);
                                }

                                mainVM.SessionToPlay(mainVM.SessionToPlay() + 1);
                            }
                        }
                    }
                }
            }

        };

        var h2hSyncHandler = setInterval(syncH2H, 3000);


        mainVM = new MainVM();

        mainVM.GetImages().done(function () {

            imagesLoaded = true;

            mainVM.Init().done(function () {

                $.each(aiPlayers, function (index, player) {

                    var canvas = document.createElement('canvas');

                    canvas.id = player;
                    canvas.width = 1000;
                    canvas.height = 850;

                    $('.beer-distribution-container').append(canvas);

                    canvasContext.push({ Id: player, Context: canvas.getContext("2d") });

                });

                $.each(canvasContext, function (index, context) {

                    if (context.Id == 'useAIble') {
                        ctx = context.Context;
                    } else if (context.Id == 'tensorflow') {
                        tensorflowCtx = context.Context;
                    } else if (context.Id == 'encog') {
                        encogCtx = context.Context;
                    }

                });

                mainVM.useAIbleSimulator().Canvas(ctx);
                mainVM.TensorFlowSimulator().Canvas(tensorflowCtx);
                mainVM.EncogSimulator().Canvas(encogCtx);

                    mainVM.InitGameElements(ctx, {
                        CANVAS_BG_CACHE: mainVM.useAIbleSimulator().CANVAS_BG_CACHE,
                        RETAILER_CACHE: mainVM.useAIbleSimulator().RETAILER_CACHE,
                        WHOLESALER_CACHE: mainVM.useAIbleSimulator().WHOLESALER_CACHE,
                        DISTRIBUTOR_CACHE: mainVM.useAIbleSimulator().DISTRIBUTOR_CACHE,
                        FACTORY_CACHE: mainVM.useAIbleSimulator().FACTORY_CACHE,
                        RETAILER_PAPER_CACHE: mainVM.useAIbleSimulator().RETAILER_PAPER_CACHE,
                        WHOLESALER_PAPER_CACHE: mainVM.useAIbleSimulator().WHOLESALER_PAPER_CACHE,
                        DISTRIBUTOR_PAPER_CACHE: mainVM.useAIbleSimulator().DISTRIBUTOR_PAPER_CACHE,
                        FACTORY_PAPER_CACHE: mainVM.useAIbleSimulator().FACTORY_PAPER_CACHE,
                        DAY_PAPER_CACHE: mainVM.useAIbleSimulator().DAY_PAPER_CACHE,
                        ROAD_PAPER_CACHE: mainVM.useAIbleSimulator().ROAD_PAPER_CACHE
                    });

                        mainVM.InitGameElements(tensorflowCtx, {
                            CANVAS_BG_CACHE: mainVM.TensorFlowSimulator().CANVAS_BG_CACHE,
                            RETAILER_CACHE: mainVM.TensorFlowSimulator().RETAILER_CACHE,
                            WHOLESALER_CACHE: mainVM.TensorFlowSimulator().WHOLESALER_CACHE,
                            DISTRIBUTOR_CACHE: mainVM.TensorFlowSimulator().DISTRIBUTOR_CACHE,
                            FACTORY_CACHE: mainVM.TensorFlowSimulator().FACTORY_CACHE,
                            RETAILER_PAPER_CACHE: mainVM.TensorFlowSimulator().RETAILER_PAPER_CACHE,
                            WHOLESALER_PAPER_CACHE: mainVM.TensorFlowSimulator().WHOLESALER_PAPER_CACHE,
                            DISTRIBUTOR_PAPER_CACHE: mainVM.TensorFlowSimulator().DISTRIBUTOR_PAPER_CACHE,
                            FACTORY_PAPER_CACHE: mainVM.TensorFlowSimulator().FACTORY_PAPER_CACHE,
                            DAY_PAPER_CACHE: mainVM.TensorFlowSimulator().DAY_PAPER_CACHE,
                            ROAD_PAPER_CACHE: mainVM.TensorFlowSimulator().ROAD_PAPER_CACHE
                        });

                        mainVM.InitGameElements(encogCtx, {
                            CANVAS_BG_CACHE: mainVM.EncogSimulator().CANVAS_BG_CACHE,
                            RETAILER_CACHE: mainVM.EncogSimulator().RETAILER_CACHE,
                            WHOLESALER_CACHE: mainVM.EncogSimulator().WHOLESALER_CACHE,
                            DISTRIBUTOR_CACHE: mainVM.EncogSimulator().DISTRIBUTOR_CACHE,
                            FACTORY_CACHE: mainVM.EncogSimulator().FACTORY_CACHE,
                            RETAILER_PAPER_CACHE: mainVM.EncogSimulator().RETAILER_PAPER_CACHE,
                            WHOLESALER_PAPER_CACHE: mainVM.EncogSimulator().WHOLESALER_PAPER_CACHE,
                            DISTRIBUTOR_PAPER_CACHE: mainVM.EncogSimulator().DISTRIBUTOR_PAPER_CACHE,
                            FACTORY_PAPER_CACHE: mainVM.EncogSimulator().FACTORY_PAPER_CACHE,
                            DAY_PAPER_CACHE: mainVM.EncogSimulator().DAY_PAPER_CACHE,
                            ROAD_PAPER_CACHE: mainVM.EncogSimulator().ROAD_PAPER_CACHE
                        });

                        $('#tensorflow').hide();
                        $('#encog').hide();
                        $('#useAIble').show();

            });
        });

        ko.applyBindings(mainVM);

    });

</script>
